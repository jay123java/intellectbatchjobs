package com.intellect.batch.launch;

import java.util.Date;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class Launcher {
	
	@Autowired
	private JobLauncher launcher;
	
	
	@Autowired
	 @Qualifier(value="missedBookingsJob")
	 private Job bookingsJob;
	
	
	@Autowired
	 @Qualifier(value="missedHblJob")
	 private Job hblJob;
	
	 @Scheduled(cron = "0 21 11 * * ?")
	   	public void launchBookigsJob(){
	   		 try {
	   			   String dateParam = new Date().toString();
	   			   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
	   			   System.out.println(dateParam);
	   			   JobExecution execution = launcher.run(bookingsJob, param);
	   			   System.out.println("Exit Status : " + execution.getStatus());
	   			     } catch (Exception e) {
	   			     }
	   	}
	
	 @Scheduled(cron = "0 21 11 * * ?")
	   	public void launchHBLsJob(){
	   		 try {
	   			   String dateParam = new Date().toString();
	   			   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
	   			   System.out.println(dateParam);
	   			   JobExecution execution = launcher.run(hblJob, param);
	   			   System.out.println("Exit Status : " + execution.getStatus());
	   			     } catch (Exception e) {
	   			     }
	   	}
	
	 /*
	 @Scheduled(initialDelay= 60000, fixedDelay=900000000)
		public void launchRecentDocumentsJob(){
			 try {
				   String dateParam = new Date().toString();
				   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
				   System.out.println(dateParam);
				   JobExecution execution = launcher.run(bookingsJob, param);
				   System.out.println("Exit Status : " + execution.getStatus());
				     } catch (Exception e) {
				     }
		}*/
	 
/*	 public void setAllSchemaAttrsJob(Job allSchemaAttrsJob){
		 this.allSchemaAttrsJob=allSchemaAttrsJob;
	 }*/

	
  /*  @Scheduled(cron = "${allDocuments.cron}")
	public void launchJob(){
		 try {
			   String dateParam = new Date().toString();
			   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
			   JobExecution execution = launcher.run(allDocumentsJob, param);
			     } catch (Exception e) {
			     }
	}


    @Scheduled(initialDelay= 60000, fixedDelay=900000000)
	public void launchRecentDocumentsJob(){
		 try {
			   String dateParam = new Date().toString();
			   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
			   System.out.println(dateParam);
			   JobExecution execution = launcher.run(recentDocumentsJob, param);
			   System.out.println("Exit Status : " + execution.getStatus());
			     } catch (Exception e) {
			     }
	}
    
    
    @Scheduled(cron = "${allDocuments.cron}")
   	public void launchAllUsersJob(){
   		 try {
   			   String dateParam = new Date().toString();
   			   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
   			   System.out.println(dateParam);
   			   JobExecution execution = launcher.run(allUsersJob, param);
   			   System.out.println("Exit Status : " + execution.getStatus());
   			     } catch (Exception e) {
   			     }
   	}
    
    @Scheduled(initialDelay= 60000, fixedDelay=900000000)
   	public void launchRecentUsersJob(){
   		 try {
   			   String dateParam = new Date().toString();
   			   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
   			   System.out.println(dateParam);
   			   JobExecution execution = launcher.run(recentUsersJob, param);
   			   System.out.println("Exit Status : " + execution.getStatus());
   			     } catch (Exception e) {
   			     }
   	}
    
    
    @Scheduled(cron = "${allDocuments.cron}")
   	public void launchAllChannelsJob(){
   		 try {
   			   String dateParam = new Date().toString();
   			   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
   			   System.out.println(dateParam);
   			   JobExecution execution = launcher.run(allChannelsJob, param);
   			   System.out.println("Exit Status : " + execution.getStatus());
   			     } catch (Exception e) {
   			     }
   	}
   
    @Scheduled(initialDelay = 60000, fixedDelay = 900000000)
    public void launchAllSchemaAttrsJob(){
    	try{
			String dateParam = new Date().toString();
		    JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
		    System.out.println(dateParam);
		    JobExecution execution = launcher.run(allSchemaAttrsJob, param);
		    System.out.println("Exit Status : " + execution.getStatus());
    	}catch(Exception e){
    		
    	}
    }
    
    @Scheduled(cron = "${allDocuments.cron}")
   	public void launchAllCategoriesJob(){
   		 try {
   			   String dateParam = new Date().toString();
   			   JobParameters param = new JobParametersBuilder().addString("date", dateParam).toJobParameters();
   			   System.out.println(dateParam);
   			   JobExecution execution = launcher.run(allCategoriesJob, param);
   			   System.out.println("Exit Status : " + execution.getStatus());
   			     } catch (Exception e) {
   			     }
   	}*/
}
